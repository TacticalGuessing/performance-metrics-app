// src/app/api/generate-data/route.js
import { NextResponse } from 'next/server';
import Papa from 'papaparse';
import JSZip from 'jszip';
import { generateAllFictionalData } from '../../../services/dataGenerationService'; // Adjust path if needed

export async function POST(request) {
  try {
    const requestParams = await request.json();
    const { format = "json" } = requestParams; // Get format, default to json

    // Call the service function to get all generated data
    const allData = generateAllFictionalData(requestParams);

    if (format === "csv_zip") {
      const zip = new JSZip();

      const addCsvToZip = (fileName, dataArray) => {
        if (dataArray && dataArray.length > 0) {
          const csvString = Papa.unparse(dataArray);
          zip.file(fileName, csvString);
        } else {
          zip.file(fileName, ""); 
        }
      };
      
      addCsvToZip("Resource_Teams.csv", allData.teams);
      addCsvToZip("Resource_SubTeams.csv", allData.subTeams);
      addCsvToZip("Resource_Personnel.csv", allData.personnel);
      addCsvToZip("Resource_Suppliers.csv", allData.suppliers);
      addCsvToZip(`CMS_Contract_Compliance_ALL_SNAPSHOTS.csv`, allData.contractData);
      addCsvToZip(`HR_Personnel_Training_ALL_SNAPSHOTS.csv`, allData.trainingData);

      const zipContent = await zip.generateAsync({ 
        type: "nodebuffer",
        compression: "DEFLATE",
        compressionOptions: { level: 6 }
      });

      return new NextResponse(zipContent, {
        status: 200,
        headers: {
          'Content-Type': 'application/zip',
          'Content-Disposition': `attachment; filename="Generated_Performance_Data.zip"`,
        },
      });

    } else { // Default to JSON
      return NextResponse.json({
        message: "All data categories generated successfully (JSON).",
        data: allData, // Return all data generated by the service
      }, { status: 200 });
    }

  } catch (error) {
    console.error("API Route - Data generation error:", error);
    const errorMessage = error instanceof Error ? error.message : String(error);
    return NextResponse.json({
      message: "Error generating data in API route.",
      error: errorMessage,
    }, { status: 500 });
  }
}